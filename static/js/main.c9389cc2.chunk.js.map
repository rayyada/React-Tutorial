{"version":3,"sources":["Functions.jsx","GameInfo.jsx","Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["calculateWinner","squares","rows","Math","sqrt","length","cols","winCombos","i","rowWinCombo","colWinCombo","j","push","leftDiagonal","rightDiagonal","currentIndex","every","val","arr","GameInfo","state","orderToggle","boardRows","_this","props","handleOnChange","e","setState","parseInt","target","value","handleSubmit","boardRowsHandler","preventDefault","winFlagHandler","react_default","a","createElement","onSubmit","this","type","onChange","winner","history","stepNumber","pow","xIsNext","_this2","map","step","move","desc","lastCoord","key","onClick","jumpToHandler","style","fontWeight","_this3","rowInput","renderRowInput","status","renderStatus","toggleButton","renderToggleButton","renderedMoves","renderMoves","reverse","object","index","React","Component","Square","hoverValue","nextProps","clickValue","hoverChar","className","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","Board","nextState","src_Square","table","children","renderSquare","boardArray","renderBoard","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Array","fill","slice","concat","floor","current","src_Board","handleClick","src_GameInfo","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.c9389cc2.chunk.js","sourcesContent":["\r\nfunction calculateWinner(squares) {\r\n    const rows = Math.sqrt(squares.length);\r\n    const cols = Math.sqrt(squares.length);\r\n    let winCombos = [];\r\n\r\n    //Winnable methods count is row+count+2\r\n    for(let i = 0; i < rows; i++) {\r\n      let rowWinCombo = [];\r\n      let colWinCombo = [];\r\n      // Grab all winning combinations of straight rows\r\n      for(let j = 0; j < cols; j++) {\r\n        rowWinCombo.push((i*rows)+j);\r\n        colWinCombo.push((j*rows)+i);\r\n      }\r\n      winCombos.push(rowWinCombo);\r\n      winCombos.push(colWinCombo);\r\n    }\r\n\r\n    let leftDiagonal = [];\r\n    let rightDiagonal = [];\r\n    for(let i = 0; i < rows; i++) {\r\n      leftDiagonal.push((i*rows) + i);\r\n      rightDiagonal.push(((i+1)*rows) - i - 1);\r\n    }\r\n    winCombos.push(leftDiagonal);\r\n    winCombos.push(rightDiagonal);\r\n\r\n    for (let i = 0; i < winCombos.length; i++) {\r\n      let currentIndex = winCombos[i];\r\n      if(squares[currentIndex[0]] && currentIndex.every((val, i, arr) => squares[val] === squares[arr[0]] )) {\r\n        return squares[currentIndex[0]];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\nexport {calculateWinner};\r\n","import React from 'react';\r\nimport {calculateWinner} from './Functions.jsx'\r\n\r\nclass GameInfo extends React.Component {\r\n\r\n    state = {\r\n        orderToggle: false,\r\n        boardRows: this.props.boardRows,\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n      this.setState({\r\n        boardRows: parseInt(e.target.value),\r\n      });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n      this.props.boardRowsHandler(this.state.boardRows);\r\n      e.preventDefault();\r\n    }\r\n\r\n    winFlagHandler = () => {\r\n      this.props.winFlagHandler();\r\n    }\r\n\r\n    renderRowInput() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n          <input type=\"text\" value={this.state.boardRows} onChange={this.handleOnChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      );\r\n    }\r\n\r\n    renderStatus() {\r\n      const history = this.props.history;\r\n      const current = history[this.props.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n      let status;\r\n      if (winner) {\r\n          status = 'Winner: ' + winner;\r\n      } else if (this.props.stepNumber === Math.pow(this.state.boardRows, 2)) {\r\n        status = 'Draw!';\r\n      } else {\r\n          status = 'Next player: ' + (this.props.xIsNext ? 'X' : 'O');\r\n      }\r\n      return (status);\r\n    }\r\n\r\n    renderMoves() {\r\n      const history = this.props.history;\r\n      const moves = history.map((step, move) => {\r\n          const desc = move ?\r\n              'Go to move #' + move + ', ' + ((move % 2 === 1) ? 'X' : 'O') + ' to row ' + step.lastCoord[0] + ', col ' + step.lastCoord[1] :\r\n              'Go to game start';\r\n          return (\r\n              <li key={'move-'+move}>\r\n                  <button\r\n                    onClick={()=>this.props.jumpToHandler(move)}\r\n                    style={ this.props.stepNumber === move ? {fontWeight: 'bold'} : {fontWeight: 'normal'}}\r\n                  >\r\n                    {desc}\r\n                  </button>\r\n              </li>\r\n          );\r\n      });\r\n      return moves;\r\n    }\r\n\r\n    renderToggleButton() {\r\n      return (\r\n          <button onClick={() => this.state.orderToggle === true ? this.setState({orderToggle: false}) : this.setState({orderToggle: true})}> Toggle list order </button>\r\n      );\r\n    }\r\n\r\n\r\n    render() {\r\n    // console.log(\"GAMEINFO RENDER\");\r\n      var rowInput = this.renderRowInput();\r\n      var status = this.renderStatus();\r\n      var toggleButton = this.renderToggleButton();\r\n      var renderedMoves = this.renderMoves();\r\n      var moves = !this.state.orderToggle ? renderedMoves : renderedMoves.reverse();\r\n\r\n      var objectArray = [rowInput,status,toggleButton,moves];\r\n      const returnObject = objectArray.map((object, index) => {\r\n        return (\r\n          <div key={'gameInfo-'+index}>\r\n            {object}\r\n          </div>\r\n        )\r\n      })\r\n      return (returnObject);\r\n  }\r\n}\r\n\r\nexport default GameInfo;\r\n","import React from 'react';\r\n\r\nclass Square extends React.Component {\r\n\r\n    state = {\r\n      hoverValue: null,\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      if (nextProps.clickValue !== null) {\r\n        this.setState({\r\n          hoverValue: null,\r\n        })\r\n      }\r\n    }\r\n\r\n    handleMouseOver(i) {\r\n      if (this.props.clickValue) {\r\n          return;\r\n      }\r\n      var hoverValue = this.state.hoverValue;\r\n      if (hoverValue === null) {\r\n          hoverValue = this.props.hoverChar;\r\n      }\r\n      this.setState({hoverValue: hoverValue});\r\n    }\r\n  \r\n    handleMouseOut(i) {\r\n      if (this.props.clickValue) {\r\n          return;\r\n      }\r\n  \r\n      var hoverValue = this.state.hoverValue;\r\n      if (hoverValue !== null) {\r\n        hoverValue = null;\r\n      }\r\n      this.setState({hoverValue: hoverValue});\r\n    }\r\n\r\n    render() { \r\n      // console.log(\"SQUARE RENDER\");\r\n      return (\r\n        <button\r\n          className=\"square\"\r\n          onClick={this.props.onClick}\r\n          onMouseOver={(i) => { this.handleMouseOver(i)} }\r\n          onMouseOut={(i) => { this.handleMouseOut(i)} }\r\n        >\r\n          {this.props.clickValue}\r\n          {this.state.hoverValue}\r\n        </button>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square.jsx';\r\n\r\nclass Board extends React.Component {\r\n\r\n  // Only re-render board if value is squares is out of date\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.squares !== nextProps.squares) {\r\n      return true;\r\n    } else if (this.props.squares.length !== nextProps.squares.length) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  renderSquare(i) {\r\n    return (\r\n        <Square\r\n            clickValue={this.props.squares[i]}\r\n            hoverChar={this.props.xIsNext ? 'X' : 'O'}\r\n            key={'square-'+i}\r\n            onClick={() => this.props.onClick(i)}\r\n        />\r\n    );\r\n  }\r\n\r\n  renderBoard(rows) {\r\n    let table = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      let children = [];\r\n      for(let j = 0; j < rows; j++) {\r\n        children.push(this.renderSquare((i*rows)+j));\r\n      }\r\n\r\n      table.push(children);\r\n\r\n    }\r\n\r\n    var result = table.map((value, index) => {\r\n      return (\r\n        <div key={'row-'+index} className=\"board-row\">\r\n          {value}\r\n        </div>\r\n      );\r\n    });\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n  // console.log(\"BOARD RENDER\");\r\n    var boardArray = this.renderBoard(this.props.boardRows);\r\n    return (\r\n      <div>\r\n        {boardArray}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport GameInfo from './GameInfo.jsx';\r\nimport Board from './Board.jsx';\r\nimport {calculateWinner} from './Functions.jsx'\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                lastCoord: [null, null],\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            boardRows: 3,\r\n        }\r\n    }\r\n\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n    this.setState({ history: history.concat([{\r\n                        squares: squares,\r\n                        lastCoord: [Math.floor(i/this.state.boardRows) + 1, (i % this.state.boardRows) + 1],\r\n                    }]),\r\n                    xIsNext: !this.state.xIsNext,\r\n                    stepNumber: history.length,\r\n                });\r\n  }\r\n\r\n  jumpToHandler = (step) => {\r\n    this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  handleOnChange = (rows) => {\r\n    var history = [{\r\n        squares: Array(Math.pow(rows, 2)).fill(null),\r\n        lastCoord: [null, null],\r\n    }];\r\n    this.setState({\r\n      history:history,\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      boardRows: rows,\r\n    })\r\n  }\r\n\r\n  render() {\r\n  // console.log(\"GAME RENDER\");\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares = {current.squares}\r\n            onClick = {(i) => this.handleClick(i)}\r\n            boardRows = {this.state.boardRows}\r\n            xIsNext = {this.state.xIsNext}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <GameInfo\r\n            history = {history}\r\n            stepNumber = {this.state.stepNumber}\r\n            xIsNext = {this.state.xIsNext}\r\n            jumpToHandler = {this.jumpToHandler}\r\n            boardRowsHandler = {this.handleOnChange}\r\n            boardRows = {this.state.boardRows}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Game.jsx';\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}